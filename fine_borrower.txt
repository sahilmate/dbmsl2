-- Creating the BORROWER table
CREATE TABLE BORROWER (
    Roll_no NUMBER PRIMARY KEY, 
    Name VARCHAR2(100), 
    DateofIssue DATE, 
    NameofBook VARCHAR2(100), 
    Status VARCHAR2(20)
);

-- Creating the FINE table
CREATE TABLE FINE (
    Roll_no NUMBER, 
    Date DATE, 
    Amount_Fine NUMBER(6,2), 
    FOREIGN KEY (Roll_no) REFERENCES BORROWER(Roll_no)
);

DECLARE
    -- Declare variables
    v_roll_no NUMBER := 101;  -- Static value for Roll_no
    v_book_name VARCHAR2(100) := 'Database Management';  -- Static value for NameofBook
    v_issue_date DATE := TO_DATE('2024-10-01', 'YYYY-MM-DD');  -- Static DateofIssue (for example)
    v_return_date DATE := SYSDATE;  -- Current date as return date
    v_days_diff NUMBER;  -- To store the difference in days
    v_fine NUMBER(6,2) := 0;  -- Fine to be calculated
    v_status VARCHAR2(20);  -- To store the current status of the book
BEGIN
    -- Fetching details from BORROWER table for the given Roll_no and NameofBook
    BEGIN
        SELECT DateofIssue, Status 
        INTO v_issue_date, v_status
        FROM BORROWER
        WHERE Roll_no = v_roll_no AND NameofBook = v_book_name;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('No record found for the provided Roll_no and Book name.');
            RAISE;
    END;

    -- Calculate the number of days the book has been issued
    v_days_diff := (v_return_date - v_issue_date);

    -- Fine calculation
    IF v_days_diff BETWEEN 15 AND 30 THEN
        v_fine := v_days_diff * 5;  -- Rs 5 per day for 15 to 30 days
    ELSIF v_days_diff > 30 THEN
        v_fine := v_days_diff * 50;  -- Rs 50 per day for more than 30 days
    ELSE
        v_fine := v_days_diff * 5;  -- Rs 5 per day for less than 15 days
    END IF;

    -- If fine is greater than 0, insert it into the FINE table
    IF v_fine > 0 THEN
        BEGIN
            INSERT INTO FINE (Roll_no, Date, Amount_Fine) 
            VALUES (v_roll_no, v_return_date, v_fine);
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error inserting fine: ' || SQLERRM);
                ROLLBACK;
        END;
    END IF;

    -- Updating the status of the book to 'R' (Returned)
    BEGIN
        UPDATE BORROWER 
        SET Status = 'R'  -- Changing status to 'Returned'
        WHERE Roll_no = v_roll_no AND NameofBook = v_book_name;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error updating book status: ' || SQLERRM);
            ROLLBACK;
    END;

    -- Output the fine amount
    DBMS_OUTPUT.PUT_LINE('Fine amount: Rs. ' || v_fine);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/
